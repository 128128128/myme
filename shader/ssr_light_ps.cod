//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   struct LIGHT_CONSTANTS
//   {
//       
//       float4 direction;              // Offset:    0
//       float4 color;                  // Offset:   16
//
//   } light_direction;                 // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// decal_sampler                     sampler      NA          NA             s0      1 
// albedo_texture                    texture  float4          2d             t0      1 
// normal_texture                    texture  float4          2d             t1      1 
// position_texture                  texture  float4          2d             t2      1 
// rm_texture                        texture  float4          2d             t3      1 
// depth_texture                     texture  float4          2d             t4      1 
// env_texture                       texture  float4          2d            t15      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[14], immediateIndexed
dcl_constantbuffer CB2[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 11
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
//   v3.x <- pin.worldpos.x; v3.y <- pin.worldpos.y; v3.z <- pin.worldpos.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 4 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\pbr_common.hlsli"
mov r0.x, l(3.141593)  // r0.x <- PI

#line 98 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\ssr_light_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t0.wxyz, s0
mov r0.yzw, r0.yyzw  // r0.y <- albedo_color.x; r0.z <- albedo_color.y; r0.w <- albedo_color.z

#line 100
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t1.xyzw, s0
mov r1.xyz, r1.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z

#line 102
mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r2.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r1.xyz, r1.xyzx, r2.xyzx

#line 104
mov r2.xyz, v3.xyzx  // r2.x <- worldPos.x; r2.y <- worldPos.y; r2.z <- worldPos.z

#line 106
mov r0.yzw, r0.yyzw  // r0.y <- specColor.x; r0.z <- specColor.y; r0.w <- specColor.z

#line 108
sample_indexable(texture2d)(float,float,float,float) r3.xy, v1.xyxx, t3.xwyz, s0
mov r3.xy, r3.xyxx  // r3.x <- metallic_smooth.x; r3.y <- metallic_smooth.w

#line 113
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, cb1[0].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- to_eye.x; r2.y <- to_eye.y; r2.z <- to_eye.z

#line 115
itof r4.xyz, l(0, 0, 0, 0)  // r4.x <- lig.x; r4.y <- lig.y; r4.z <- lig.z

#line 118
sample_indexable(texture2d)(float,float,float,float) r5.xyz, v1.xyxx, t2.xyzw, s0
mov r5.xyz, r5.xyzx  // r5.x <- P.x; r5.y <- P.y; r5.z <- P.z

#line 119
mov r6.xyz, -cb1[0].xyzx
add r6.xyz, r5.xyzx, r6.xyzx  // r6.x <- E.x; r6.y <- E.y; r6.z <- E.z

#line 120
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r7.xyz, r1.wwww, r1.xyzx  // r7.x <- N.x; r7.y <- N.y; r7.z <- N.z

#line 121
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx
dp3 r1.w, r6.xyzx, r7.xyzx
add r1.w, r1.w, r1.w
mov r1.w, -r1.w
mul r7.xyz, r1.wwww, r7.xyzx
add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- R.x; r6.y <- R.y; r6.z <- R.z

#line 125
mov r1.w, r6.y  // r1.w <- v.y

#line 126
mov r7.xz, r6.xxzx  // r7.x <- work.x; r7.z <- work.z

#line 127
itof r7.y, l(0)  // r7.y <- work.y

#line 128
dp3 r2.w, r7.xyzx, r7.xyzx
rsq r2.w, r2.w
mul r8.x, r2.w, r7.x  // r8.x <- work.x

#line 129
mov r8.x, r8.x  // r8.x <- v.x

#line 136
mov r8.x, r8.x  // r8.x <- uv.x
mov r1.w, r1.w  // r1.w <- uv.y

#line 137
mov r8.z, -r1.w  // r8.z <- uv.y

#line 138
mul r3.zw, r8.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)
add r8.yz, r3.zzwz, l(0.000000, 0.500000, 0.500000, 0.000000)  // r8.y <- uv.x

#line 139
mul r8.x, r8.y, l(0.500000)  // r8.x <- uv.x

#line 141
itof r1.w, l(0)
lt r1.w, r1.w, r7.z
if_nz r1.w

#line 142
  mov r1.w, -r8.x
  add r8.x, r1.w, l(1.000000)

#line 143
endif 

#line 146
mov r1.w, l(0)  // r1.w <- roughness

#line 149
mov r2.w, l(1.000000)
mov r2.w, -r2.w
add r2.w, r2.w, l(1.000000)  // r2.w <- w

#line 150
mul r2.w, r2.w, l(12.000000)  // r2.w <- level

#line 151
sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r8.xzxx, t15.xyzw, s0, r2.w
mov r7.xyz, r7.xyzx  // r7.x <- env.x; r7.y <- env.y; r7.z <- env.z

#line 153
itof r8.xyz, l(100, 100, 100, 0)
add r8.xyz, r7.xyzx, r8.xyzx
div r7.xyz, r7.xyzx, r8.xyzx

#line 155
nop 
mov r5.xyz, r5.xyzx
mov r6.xyz, r6.xyzx

#line 21
dp3 r2.w, r6.xyzx, r6.xyzx
rsq r2.w, r2.w
mul r6.xyz, r2.wwww, r6.xyzx

#line 23
mul r6.xyz, r6.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000)

#line 25
mov r2.w, l(0)  // r2.w <- i
mov r8.xyz, r5.xyzx  // r8.x <- P.x; r8.y <- P.y; r8.z <- P.z
mov r3.zw, l(0,0,0,0)  // r3.z <- <SSR return value>.x; r3.w <- <SSR return value>.y
mov r4.w, r2.w  // r4.w <- i
mov r5.w, l(0)
loop 
  ilt r6.w, r4.w, l(100)
  mov r5.w, l(0)
  breakc_z r6.w

#line 26
  add r8.xyz, r6.xyzx, r8.xyzx

#line 29
  mov r9.xyz, -cb1[0].xyzx
  add r9.xyz, r8.xyzx, r9.xyzx
  dp3 r6.w, r9.xyzx, r9.xyzx
  sqrt r6.w, r6.w  // r6.w <- DistP

#line 32
  mul r9.xyz, r8.xxxx, cb1[10].xywx
  mul r10.xyz, r8.yyyy, cb1[11].xywx
  add r9.xyz, r9.xyzx, r10.xyzx
  mul r10.xyz, r8.zzzz, cb1[12].xywx
  add r9.xyz, r9.xyzx, r10.xyzx
  mul r10.xyz, cb1[13].xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r9.xyz, r9.xyzx, r10.xyzx  // r9.x <- screenP.x; r9.y <- screenP.y; r9.z <- screenP.w

#line 34
  div r9.xy, r9.xyxx, r9.zzzz
  mul r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  add r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r9.x <- Puv.x; r9.y <- Puv.y

#line 35
  mov r7.w, -r9.y
  add r9.z, r7.w, l(1.000000)  // r9.z <- Puv.y

#line 37
  itof r7.w, l(0)
  lt r7.w, r9.x, r7.w
  if_nz r7.w
    itof r3.zw, l(0, 0, -1, -1)
    mov r5.w, l(-1)
    break 
  endif 

#line 38
  itof r8.w, l(0)
  lt r8.w, r9.z, r8.w
  if_nz r8.w
    itof r3.zw, l(0, 0, -1, -1)
    mov r5.w, l(-1)
    break 
  endif 

#line 39
  itof r9.y, l(1)
  lt r9.y, r9.y, r9.x
  if_nz r9.y
    itof r3.zw, l(0, 0, -1, -1)
    mov r5.w, l(-1)
    break 
  endif 

#line 40
  itof r9.w, l(1)
  lt r9.w, r9.w, r9.z
  if_nz r9.w
    itof r3.zw, l(0, 0, -1, -1)
    mov r5.w, l(-1)
    break 
  endif 

#line 43
  sample_indexable(texture2d)(float,float,float,float) r10.x, r9.xzxx, t4.xyzw, s0
  mov r10.x, r10.x  // r10.x <- DistS

#line 47
  lt r10.y, r10.x, r6.w
  itof r10.z, l(2)
  mov r10.z, -r10.z
  add r6.w, r6.w, r10.z
  lt r6.w, r6.w, r10.x
  and r6.w, r6.w, r10.y
  if_nz r6.w

#line 49
    mov r3.zw, r9.xxxz
    mov r5.w, l(-1)
    break 

#line 50
  endif 
  or r6.w, r9.w, r6.w
  or r6.w, r9.y, r6.w
  or r6.w, r8.w, r6.w
  or r5.w, r7.w, r6.w

#line 25
  iadd r4.w, r4.w, l(1)

#line 51
endloop 

#line 52
if_z r5.w
  itof r3.zw, l(0, 0, -1, -1)
endif 

#line 155
mov r3.zw, r3.zzzw  // r3.z <- ssr.x; r3.w <- ssr.y

#line 156
itof r2.w, l(0)
ge r2.w, r3.z, r2.w
if_nz r2.w

#line 157
  sample_indexable(texture2d)(float,float,float,float) r5.xyz, r3.zwzz, t0.xyzw, s0  // r5.x <- texR.x; r5.y <- texR.y; r5.z <- texR.z

#line 160
  mov r1.w, r1.w  // r1.w <- rate

#line 161
  mul r1.w, r1.w, l(0.600000)
  add r1.w, r1.w, l(0.100000)  // r1.w <- rate

#line 162
  mov r6.xyz, -r5.xyzx
  add r6.xyz, r6.xyzx, r7.xyzx
  mul r6.xyz, r1.wwww, r6.xyzx
  add r7.xyz, r5.xyzx, r6.xyzx

#line 163
endif 

#line 164
add r4.xyz, r4.xyzx, r7.xyzx

#line 182
nop 
mov r1.xyz, r1.xyzx
mov r5.xyz, -cb2[0].xyzx
mov r2.xyz, r2.xyzx

#line 95 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\pbr_common.hlsli"
add r6.xyz, r2.xyzx, r5.xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx  // r6.x <- H.x; r6.y <- H.y; r6.z <- H.z

#line 98
mov r1.w, l(0.500000)  // r1.w <- roughness

#line 100
mov r2.w, l(-0.000000)
add r2.w, r2.w, l(0.500000)
mul r2.w, r1.w, r2.w
add r2.w, r2.w, l(0.000000)  // r2.w <- energyBias

#line 101
mov r3.z, l(-1.000000)
add r3.z, r3.z, l(0.662252)
mul r3.z, r1.w, r3.z
add r3.z, r3.z, l(1.000000)  // r3.z <- energyFactor

#line 104
dp3 r3.w, r5.xyzx, r6.xyzx
max r3.w, r3.w, l(0.000000)
min r3.w, r3.w, l(1.000000)  // r3.w <- dotLH

#line 108
mul r4.w, r3.w, l(2.000000)
mul r3.w, r3.w, r4.w
mul r1.w, r1.w, r3.w
add r1.w, r1.w, r2.w  // r1.w <- Fd90

#line 111
dp3 r2.w, r1.xyzx, r5.xyzx
max r2.w, r2.w, l(0.000000)
min r2.w, r2.w, l(1.000000)  // r2.w <- dotNL

#line 112
itof r3.w, l(1)
itof r4.w, l(1)
mov r4.w, -r4.w
add r4.w, r1.w, r4.w
itof r5.x, l(1)
mov r2.w, -r2.w
add r2.w, r2.w, r5.x
mov r5.x, l(1.000000)
mul r5.x, r2.w, r5.x
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, r5.x
mul r2.w, r2.w, r4.w
add r2.w, r2.w, r3.w  // r2.w <- FL

#line 115
dp3 r3.w, r1.xyzx, r2.xyzx
max r3.w, r3.w, l(0.000000)
min r3.w, r3.w, l(1.000000)  // r3.w <- dotNV

#line 116
itof r4.w, l(1)
itof r5.x, l(1)
mov r5.x, -r5.x
add r1.w, r1.w, r5.x
itof r5.x, l(1)
mov r3.w, -r3.w
add r3.w, r3.w, r5.x
mov r5.x, l(1.000000)
mul r5.x, r3.w, r5.x
mul r3.w, r3.w, r3.w
mul r3.w, r3.w, r3.w
mul r3.w, r3.w, r5.x
mul r1.w, r1.w, r3.w
add r1.w, r1.w, r4.w  // r1.w <- FV

#line 121
mul r1.w, r1.w, r2.w
mul r1.w, r3.z, r1.w  // r1.w <- <CalcDiffuseFromFresnel return value>

#line 182 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\ssr_light_ps.hlsl"
mov r1.w, r1.w  // r1.w <- diffuseFromFresnel

#line 186
mov r5.xyz, -cb2[0].xyzx
dp3 r2.w, r1.xyzx, r5.xyzx
max r2.w, r2.w, l(0.000000)
min r2.w, r2.w, l(1.000000)  // r2.w <- NdotL

#line 187
mul r5.xyz, r2.wwww, cb2[1].xyzx
div r5.xyz, r5.xyzx, r0.xxxx  // r5.x <- lambertDiffuse.x; r5.y <- lambertDiffuse.y; r5.z <- lambertDiffuse.z

#line 190
mul r6.xyz, r0.yzwy, r1.wwww
mul r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z

#line 195
nop 
mov r6.xyz, -cb2[0].xyzx
mov r2.xyz, r2.xyzx
mov r1.xyz, r1.xyzx
mov r1.w, r3.y

#line 41 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\pbr_common.hlsli"
mov r2.w, l(0.760000)  // r2.w <- microfacet

#line 45
mov r1.w, r1.w  // r1.w <- f0

#line 48
add r7.xyz, r2.xyzx, r6.xyzx
dp3 r3.z, r7.xyzx, r7.xyzx
rsq r3.z, r3.z
mul r7.xyz, r3.zzzz, r7.xyzx  // r7.x <- H.x; r7.y <- H.y; r7.z <- H.z

#line 51
dp3 r3.z, r1.xyzx, r7.xyzx
max r3.z, r3.z, l(0.000000)
min r3.z, r3.z, l(1.000000)  // r3.z <- NdotH

#line 52
dp3 r3.w, r2.xyzx, r7.xyzx
max r3.w, r3.w, l(0.000000)
min r3.w, r3.w, l(1.000000)  // r3.w <- VdotH

#line 53
dp3 r4.w, r1.xyzx, r6.xyzx
max r4.w, r4.w, l(0.000000)
min r4.w, r4.w, l(1.000000)  // r4.w <- NdotL

#line 54
dp3 r1.x, r1.xyzx, r2.xyzx
max r1.x, r1.x, l(0.000000)
min r1.x, r1.x, l(1.000000)  // r1.x <- NdotV

#line 57
nop 
mov r2.w, r2.w
mov r3.z, r3.z

#line 16
mul r1.y, r3.z, r3.z  // r1.y <- t2

#line 17
mul r1.z, r3.z, r3.z
mul r1.z, r3.z, r1.z
mul r1.z, r3.z, r1.z  // r1.z <- t4

#line 18
mul r2.x, r2.w, r2.w  // r2.x <- m2

#line 19
mul r2.y, r2.x, l(4.000000)
mul r1.z, r1.z, r2.y
div r1.z, l(1.000000), r1.z  // r1.z <- D

#line 20
div r2.x, l(-1.000000), r2.x
mov r2.y, -r1.y
add r2.y, r2.y, l(1.000000)
mul r2.x, r2.y, r2.x
div r1.y, r2.x, r1.y
mul r1.y, r1.y, l(1.442695)
exp r1.y, r1.y
mul r1.y, r1.y, r1.z  // r1.y <- D

#line 21
mov r1.y, r1.y  // r1.y <- <Beckmann return value>

#line 57
mov r1.y, r1.y  // r1.y <- D

#line 60
nop 
mov r1.w, r1.w
mov r3.w, r3.w

#line 28
itof r1.z, l(1)
mov r2.x, -r1.w
add r1.z, r1.z, r2.x
itof r2.x, l(1)
mov r2.y, -r3.w
add r2.x, r2.y, r2.x
mov r2.y, l(1.000000)
mul r2.y, r2.x, r2.y
mul r2.x, r2.x, r2.x
mul r2.x, r2.x, r2.x
mul r2.x, r2.x, r2.y
mul r1.z, r1.z, r2.x
add r1.z, r1.z, r1.w  // r1.z <- <SpcFresnel return value>

#line 60
mov r1.z, r1.z  // r1.z <- F

#line 63
itof r1.w, l(2)
mul r1.w, r3.z, r1.w
mul r1.w, r1.x, r1.w
div r1.w, r1.w, r3.w
itof r2.x, l(2)
mul r2.x, r3.z, r2.x
mul r2.x, r4.w, r2.x
div r2.x, r2.x, r3.w
min r1.w, r1.w, r2.x
min r1.w, r1.w, l(1.000000)  // r1.w <- G

#line 66
mul r0.x, r0.x, r1.x
mul r0.x, r3.z, r0.x  // r0.x <- m

#line 69
mul r1.x, r1.y, r1.z
mul r1.x, r1.w, r1.x
div r0.x, r1.x, r0.x
max r0.x, r0.x, l(0.000000)  // r0.x <- <CookTorranceSpecular return value>

#line 195 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\ssr_light_ps.hlsl"
mul r1.xyz, r0.xxxx, cb2[1].xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z

#line 201
mov r2.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r2.xyz, r0.yzwy, r2.xyzx
mul r2.xyz, r2.xyzx, r3.xxxx
add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.xyz, r1.xyzx, r2.xyzx

#line 205
mov r0.x, -r3.y
add r0.x, r0.x, l(1.000000)
mul r2.xyz, r0.xxxx, r5.xyzx
mul r1.xyz, r3.yyyy, r1.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- lig.x; r1.y <- lig.y; r1.z <- lig.z

#line 212
mov r2.xyz, l(1.000000,1.000000,1.000000,0)  // r2.x <- ambient_light.x; r2.y <- ambient_light.y; r2.z <- ambient_light.z

#line 214
mul r0.xyz, r0.yzwy, r2.xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- lig.x; r0.y <- lig.y; r0.z <- lig.z

#line 217
mov r0.w, l(1.000000)  // r0.w <- final_color.w

#line 218
mov r0.xyz, r0.xyzx  // r0.x <- final_color.x; r0.y <- final_color.y; r0.z <- final_color.z

#line 219
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 325 instruction slots used
