//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   struct LIGHT_CONSTANTS
//   {
//       
//       float4 direction;              // Offset:    0
//       float4 color;                  // Offset:   16
//
//   } light_direction;                 // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// decal_sampler                     sampler      NA          NA             s0      1 
// albedo_texture                    texture  float4          2d             t0      1 
// normal_texture                    texture  float4          2d             t1      1 
// position_texture                  texture  float4          2d             t2      1 
// rm_texture                        texture  float4          2d             t3      1 
// depth_texture                     texture  float4          2d             t4      1 
// env_texture                       texture  float4          2d            t15      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[14], immediateIndexed
dcl_constantbuffer CB2[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 11
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t1.xyzw, s0
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r2.xy, v1.xyxx, t3.xwyz, s0
add r3.xyz, -v3.xyzx, cb1[0].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r3.xyzx
sample_indexable(texture2d)(float,float,float,float) r5.xyz, v1.xyxx, t2.xyzw, s0
add r6.xyz, r5.xyzx, -cb1[0].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r7.xyz, r1.wwww, r1.xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx
dp3 r1.w, r6.xyzx, r7.xyzx
add r1.w, r1.w, r1.w
mad r6.yzw, r7.xxyz, -r1.wwww, r6.xxyz
dp2 r1.w, r6.ywyy, r6.ywyy
rsq r1.w, r1.w
mul r6.x, r1.w, r6.y
mad r7.yz, r6.xxzx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
mul r1.w, r7.y, l(0.500000)
lt r2.z, l(0.000000), r6.w
mad r2.w, -r7.y, l(0.500000), l(1.000000)
movc r7.x, r2.z, r2.w, r1.w
sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r7.xzxx, t15.xyzw, s0, l(0.000000)
add r8.xyz, r7.xyzx, l(100.000000, 100.000000, 100.000000, 0.000000)
div r7.xyz, r7.xyzx, r8.xyzx
dp3 r1.w, r6.yzwy, r6.yzwy
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.yzwy
mov r8.xyz, r5.xyzx
mov r2.zw, l(0,0,0,0)
mov r1.w, l(0)
mov r3.w, l(0)
loop 
  ige r4.w, r1.w, l(100)
  mov r3.w, l(0)
  breakc_nz r4.w
  mad r8.xyz, r6.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000), r8.xyzx
  mul r9.xyz, r8.yyyy, cb1[11].xywx
  mad r9.xyz, r8.xxxx, cb1[10].xywx, r9.xyzx
  mad r9.xyz, r8.zzzz, cb1[12].xywx, r9.xyzx
  add r9.xyz, r9.xyzx, cb1[13].xywx
  div r9.xy, r9.xyxx, r9.zzzz
  mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  lt r4.w, r9.x, l(0.000000)
  if_nz r4.w
    mov r2.zw, l(0,0,-1.000000,-1.000000)
    mov r3.w, l(-1)
    break 
  endif 
  add r5.w, -r9.y, l(1.000000)
  lt r6.w, r5.w, l(0.000000)
  if_nz r6.w
    mov r2.zw, l(0,0,-1.000000,-1.000000)
    mov r3.w, l(-1)
    break 
  endif 
  lt r7.w, l(1.000000), r9.x
  if_nz r7.w
    mov r2.zw, l(0,0,-1.000000,-1.000000)
    mov r3.w, l(-1)
    break 
  endif 
  lt r5.w, l(1.000000), r5.w
  if_nz r5.w
    mov r2.zw, l(0,0,-1.000000,-1.000000)
    mov r3.w, l(-1)
    break 
  endif 
  add r10.xyz, r8.xyzx, -cb1[0].xyzx
  dp3 r8.w, r10.xyzx, r10.xyzx
  sqrt r8.w, r8.w
  add r9.z, -r9.y, l(1.000000)
  sample_indexable(texture2d)(float,float,float,float) r9.y, r9.xzxx, t4.yxzw, s0
  lt r9.w, r9.y, r8.w
  add r8.w, r8.w, l(-2.000000)
  lt r8.w, r8.w, r9.y
  and r8.w, r8.w, r9.w
  if_nz r8.w
    mov r2.zw, r9.xxxz
    mov r3.w, l(-1)
    break 
  endif 
  or r5.w, r5.w, r8.w
  or r5.w, r7.w, r5.w
  or r5.w, r6.w, r5.w
  or r3.w, r4.w, r5.w
  iadd r1.w, r1.w, l(1)
  mov r2.zw, l(0,0,0,0)
endloop 
movc r2.zw, r3.wwww, r2.zzzw, l(0,0,-1.000000,-1.000000)
ge r1.w, r2.z, l(0.000000)
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r5.xyz, r2.zwzz, t0.xyzw, s0
  add r6.xyz, -r5.xyzx, r7.xyzx
  mad r7.xyz, r6.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000), r5.xyzx
endif 
mad r3.xyz, r3.xyzx, r0.wwww, -cb2[0].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3_sat r0.w, -cb2[0].xyzx, r3.xyzx
dp3_sat r1.w, r1.xyzx, -cb2[0].xyzx
mad r0.w, r0.w, r0.w, l(-0.750000)
add r2.z, -r1.w, l(1.000000)
mul r2.w, r2.z, r2.z
mul r2.w, r2.w, r2.w
mul r2.z, r2.w, r2.z
mad r2.z, r0.w, r2.z, l(1.000000)
dp3_sat r2.w, r1.xyzx, r4.xyzx
add r3.w, -r2.w, l(1.000000)
mul r4.w, r3.w, r3.w
mul r4.w, r4.w, r4.w
mul r3.w, r3.w, r4.w
mad r0.w, r0.w, r3.w, l(1.000000)
mul r0.w, r0.w, r2.z
mul r0.w, r0.w, l(0.831126)
mul r5.xyz, r1.wwww, cb2[1].xyzx
mul r5.xyz, r5.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
mul r6.xyz, r0.wwww, r0.xyzx
mul r5.xyz, r5.xyzx, r6.xyzx
dp3_sat r0.w, r1.xyzx, r3.xyzx
dp3_sat r1.x, r4.xyzx, r3.xyzx
mul r1.y, r0.w, r0.w
mul r1.z, r1.y, r1.y
mul r1.z, r1.z, l(2.310400)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mad r2.z, -r0.w, r0.w, l(1.000000)
mul r2.z, r2.z, l(-1.731302)
div r1.y, r2.z, r1.y
mul r1.y, r1.y, l(1.442695)
exp r1.y, r1.y
mul r1.y, r1.y, r1.z
add r1.z, -r2.y, l(1.000000)
add r2.z, -r1.x, l(1.000000)
mul r3.x, r2.z, r2.z
mul r3.x, r3.x, r3.x
mul r2.z, r2.z, r3.x
mad r2.z, r1.z, r2.z, r2.y
add r3.x, r0.w, r0.w
mul r3.y, r2.w, r3.x
div r3.y, r3.y, r1.x
mul r1.w, r1.w, r3.x
div r1.x, r1.w, r1.x
min r1.x, r1.x, r3.y
min r1.x, r1.x, l(1.000000)
mul r0.w, r2.w, r0.w
mul r0.w, r0.w, l(3.141593)
mul r1.y, r1.y, r2.z
mul r1.x, r1.x, r1.y
div r0.w, r1.x, r0.w
max r0.w, r0.w, l(0.000000)
mul r1.xyw, r0.wwww, cb2[1].xyxz
add r3.xyz, r0.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r2.xzw, r2.xxxx, r3.xxyz, l(1.000000, 0.000000, 1.000000, 1.000000)
mul r1.xyw, r1.xyxw, r2.xzxw
mul r1.xyw, r2.yyyy, r1.xyxw
mad r1.xyz, r5.xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, r7.xyzx
add o0.xyz, r0.xyzx, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 166 instruction slots used
