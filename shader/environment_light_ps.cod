//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// decal_sampler                     sampler      NA          NA             s0      1 
// ClampSampler                      sampler      NA          NA             s1      1 
// albedo_texture                    texture  float4          2d             t0      1 
// normal_texture                    texture  float4          2d             t1      1 
// position_texture                  texture  float4          2d             t2      1 
// rm_texture                        texture  float4          2d             t3      1 
// depth_texture                     texture  float4          2d             t4      1 
// env_texture                       texture  float4          2d            t15      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t1.xyzw, s0
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t2.xyzw, s0
add r2.xyz, r1.xyzx, -cb1[0].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mad r0.yzw, r0.xxyz, -r0.wwww, r2.xxyz
dp2 r1.w, r0.ywyy, r0.ywyy
rsq r1.w, r1.w
mul r0.x, r0.y, r1.w
mad r2.yz, r0.xxzx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
mul r0.x, r2.y, l(0.500000)
lt r1.w, l(0.000000), r0.w
mad r2.y, -r2.y, l(0.500000), l(1.000000)
movc r2.x, r1.w, r2.y, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t3.zxyw, s0
add r1.w, -r0.x, l(1.000000)
mul r2.y, r1.w, r1.w
mul r2.y, r2.y, r2.y
mad r1.w, -r1.w, r2.y, l(1.000000)
add r1.w, r1.w, r1.w
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.xzxx, t15.xyzw, s1, r1.w
add r3.xyz, r2.xyzx, l(100.000000, 100.000000, 100.000000, 0.000000)
div r2.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r0.yzw, r0.yyzw, r1.wwww
mov r3.xyz, r1.xyzx
mov r4.xy, l(0,0,0,0)
mov r1.w, l(0)
mov r3.w, l(0)
loop 
  ige r4.z, r1.w, l(100)
  mov r3.w, l(0)
  breakc_nz r4.z
  mad r3.xyz, r0.yzwy, l(0.300000, 0.300000, 0.300000, 0.000000), r3.xyzx
  mul r5.xyz, r3.yyyy, cb1[11].xywx
  mad r5.xyz, r3.xxxx, cb1[10].xywx, r5.xyzx
  mad r5.xyz, r3.zzzz, cb1[12].xywx, r5.xyzx
  add r5.xyz, r5.xyzx, cb1[13].xywx
  div r4.zw, r5.xxxy, r5.zzzz
  mad r5.xy, r4.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  lt r4.z, r5.x, l(0.000000)
  if_nz r4.z
    mov r4.xy, l(-1.000000,-1.000000,0,0)
    mov r3.w, l(-1)
    break 
  endif 
  add r4.w, -r5.y, l(1.000000)
  lt r5.w, r4.w, l(0.000000)
  if_nz r5.w
    mov r4.xy, l(-1.000000,-1.000000,0,0)
    mov r3.w, l(-1)
    break 
  endif 
  lt r6.x, l(1.000000), r5.x
  if_nz r6.x
    mov r4.xy, l(-1.000000,-1.000000,0,0)
    mov r3.w, l(-1)
    break 
  endif 
  lt r4.w, l(1.000000), r4.w
  if_nz r4.w
    mov r4.xy, l(-1.000000,-1.000000,0,0)
    mov r3.w, l(-1)
    break 
  endif 
  add r6.yzw, r3.xxyz, -cb1[0].xxyz
  dp3 r6.y, r6.yzwy, r6.yzwy
  sqrt r6.y, r6.y
  add r5.z, -r5.y, l(1.000000)
  sample_indexable(texture2d)(float,float,float,float) r5.y, r5.xzxx, t4.yxzw, s0
  lt r6.z, r5.y, r6.y
  add r6.y, r6.y, l(-2.000000)
  lt r5.y, r6.y, r5.y
  and r5.y, r5.y, r6.z
  if_nz r5.y
    mov r4.xy, r5.xzxx
    mov r3.w, l(-1)
    break 
  endif 
  or r4.w, r4.w, r5.y
  or r4.w, r6.x, r4.w
  or r4.w, r5.w, r4.w
  or r3.w, r4.z, r4.w
  iadd r1.w, r1.w, l(1)
  mov r4.xy, l(0,0,0,0)
endloop 
movc r0.yz, r3.wwww, r4.xxyx, l(0,-1.000000,-1.000000,0)
ge r0.w, r0.y, l(0.000000)
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.yzyy, t0.xyzw, s0
  add r3.xyzw, -r1.xyzw, r2.xyzw
  mad o0.xyzw, r0.xxxx, r3.xyzw, r1.xyzw
else 
  mov o0.xyzw, r2.xyzw
endif 
ret 
// Approximately 104 instruction slots used
