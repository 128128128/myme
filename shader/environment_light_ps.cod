//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// decal_sampler                     sampler      NA          NA             s0      1 
// ClampSampler                      sampler      NA          NA             s1      1 
// albedo_texture                    texture  float4          2d             t0      1 
// normal_texture                    texture  float4          2d             t1      1 
// position_texture                  texture  float4          2d             t2      1 
// rm_texture                        texture  float4          2d             t3      1 
// depth_texture                     texture  float4          2d             t4      1 
// env_texture                       texture  float4          2d            t15      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
//   v3.x <- pin.worldpos.x; v3.y <- pin.worldpos.y; v3.z <- pin.worldpos.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 192 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\environment_light_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t1.xyzw, s0
mov r0.xyz, r0.xyzx  // r0.x <- tex.x; r0.y <- tex.y; r0.z <- tex.z

#line 193
mul r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r1.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- orgN.x; r0.y <- orgN.y; r0.z <- orgN.z

#line 194
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z

#line 197
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t2.xyzw, s0
mov r1.xyz, r1.xyzx  // r1.x <- P.x; r1.y <- P.y; r1.z <- P.z

#line 198
mov r2.xyz, -cb1[0].xyzx
add r2.xyz, r1.xyzx, r2.xyzx  // r2.x <- E.x; r2.y <- E.y; r2.z <- E.z

#line 199
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r2.xyzx, r0.xyzx
add r0.w, r0.w, r0.w
mov r0.w, -r0.w
mul r0.xyz, r0.wwww, r0.xyzx
add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- R.x; r0.y <- R.y; r0.z <- R.z

#line 205
mov r0.w, r0.y  // r0.w <- v.y

#line 206
mov r2.xz, r0.xxzx  // r2.x <- work.x; r2.z <- work.z

#line 207
itof r2.y, l(0)  // r2.y <- work.y

#line 208
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r3.x, r1.w, r2.x  // r3.x <- work.x

#line 209
mov r3.x, r3.x  // r3.x <- v.x

#line 216
mov r3.x, r3.x  // r3.x <- uv.x
mov r0.w, r0.w  // r0.w <- uv.y

#line 217
mov r3.z, -r0.w  // r3.z <- uv.y

#line 218
mul r2.xy, r3.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
add r3.yz, r2.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)  // r3.y <- uv.x

#line 219
mul r3.x, r3.y, l(0.500000)  // r3.x <- uv.x

#line 221
itof r0.w, l(0)
lt r0.w, r0.w, r2.z
if_nz r0.w

#line 222
  mov r0.w, -r3.x
  add r3.x, r0.w, l(1.000000)

#line 223
endif 

#line 225
sample_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t3.xywz, s0
mov r0.w, r0.w  // r0.w <- RM.z

#line 226
mov r0.w, r0.w  // r0.w <- roughness

#line 229
mov r1.w, -r0.w
add r1.w, r1.w, l(1.000000)
mov r2.x, l(1.000000)
mul r2.x, r1.w, r2.x
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.x
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)  // r1.w <- w

#line 230
mul r1.w, r1.w, l(2.000000)  // r1.w <- level

#line 231
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xzxx, t15.xyzw, s1, r1.w  // r2.x <- env.x; r2.y <- env.y; r2.z <- env.z; r2.w <- env.w

#line 233
itof r3.xyz, l(100, 100, 100, 0)
add r3.xyz, r2.xyzx, r3.xyzx
div r2.xyz, r2.xyzx, r3.xyzx

#line 236
nop 
mov r1.xyz, r1.xyzx
mov r0.xyz, r0.xyzx

#line 97
mov r1.w, l(0.300000)  // r1.w <- step

#line 99
dp3 r3.x, r0.xyzx, r0.xyzx
rsq r3.x, r3.x
mul r0.xyz, r0.xyzx, r3.xxxx

#line 101
mul r0.xyz, r1.wwww, r0.xyzx

#line 103
itof r1.w, l(2)  // r1.w <- maxThickness

#line 106
mov r3.x, l(0)  // r3.x <- i
mov r3.yzw, r1.xxyz  // r3.y <- P.x; r3.z <- P.y; r3.w <- P.z
mov r4.xy, l(0,0,0,0)  // r4.x <- <ssr return value>.x; r4.y <- <ssr return value>.y
mov r4.z, r3.x  // r4.z <- i
mov r4.w, l(0)
loop 
  ilt r5.x, r4.z, l(10)
  mov r4.w, l(0)
  breakc_z r5.x

#line 107
  mov r5.x, l(1.000000)  // r5.x <- ray

#line 108
  mul r5.xyz, r0.xyzx, r5.xxxx
  add r3.yzw, r3.yyzw, r5.xxyz

#line 111
  mov r5.xyz, -cb1[0].xyzx
  add r5.xyz, r3.yzwy, r5.xyzx
  dp3 r5.x, r5.xyzx, r5.xyzx
  sqrt r5.x, r5.x  // r5.x <- DistP

#line 114
  mul r5.yzw, r3.yyyy, cb1[10].xxyw
  mul r6.xyz, r3.zzzz, cb1[11].xywx
  add r5.yzw, r5.yyzw, r6.xxyz
  mul r6.xyz, r3.wwww, cb1[12].xywx
  add r5.yzw, r5.yyzw, r6.xxyz
  mul r6.xyz, cb1[13].xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r5.yzw, r5.yyzw, r6.xxyz  // r5.y <- screenP.x; r5.z <- screenP.y; r5.w <- screenP.w

#line 116
  div r5.yz, r5.yyzy, r5.wwww
  mul r5.yz, r5.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
  add r6.xy, r5.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)  // r6.x <- Puv.x; r6.y <- Puv.y

#line 117
  mov r5.y, -r6.y
  add r6.z, r5.y, l(1.000000)  // r6.z <- Puv.y

#line 119
  itof r5.y, l(0)
  lt r5.y, r6.x, r5.y
  if_nz r5.y
    itof r4.xy, l(-1, -1, 0, 0)
    mov r4.w, l(-1)
    break 
  endif 

#line 120
  itof r5.z, l(0)
  lt r5.z, r6.z, r5.z
  if_nz r5.z
    itof r4.xy, l(-1, -1, 0, 0)
    mov r4.w, l(-1)
    break 
  endif 

#line 121
  itof r5.w, l(1)
  lt r5.w, r5.w, r6.x
  if_nz r5.w
    itof r4.xy, l(-1, -1, 0, 0)
    mov r4.w, l(-1)
    break 
  endif 

#line 122
  itof r6.y, l(1)
  lt r6.y, r6.y, r6.z
  if_nz r6.y
    itof r4.xy, l(-1, -1, 0, 0)
    mov r4.w, l(-1)
    break 
  endif 

#line 125
  sample_indexable(texture2d)(float,float,float,float) r6.w, r6.xzxx, t4.yzwx, s0
  mov r6.w, r6.w  // r6.w <- DistS

#line 130
  lt r7.x, r6.w, r5.x
  mov r6.w, -r6.w
  add r5.x, r5.x, r6.w
  lt r5.x, r5.x, r1.w
  and r5.x, r5.x, r7.x
  if_nz r5.x

#line 133
    mov r4.xy, r6.xzxx
    mov r4.w, l(-1)
    break 

#line 145
  endif 
  or r5.x, r6.y, r5.x
  or r5.x, r5.w, r5.x
  or r5.x, r5.z, r5.x
  or r4.w, r5.y, r5.x

#line 106
  iadd r4.z, r4.z, l(1)

#line 146
endloop 

#line 147
if_z r4.w
  itof r4.xy, l(-1, -1, 0, 0)
endif 

#line 236
mov r4.xy, r4.xyxx  // r4.x <- l_ssr.x; r4.y <- l_ssr.y

#line 237
itof r0.x, l(0)
ge r0.x, r4.x, r0.x
if_nz r0.x

#line 238
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r4.xyxx, t0.xyzw, s0  // r1.x <- texR.x; r1.y <- texR.y; r1.z <- texR.z; r1.w <- texR.w

#line 241
  mov r0.w, r0.w  // r0.w <- rate

#line 242
  mul r0.x, r0.w, l(0.600000)
  add r0.x, r0.x, l(0.400000)  // r0.x <- rate

#line 243
  mov r3.xyzw, -r1.xyzw
  add r3.xyzw, r2.xyzw, r3.xyzw
  mul r0.xyzw, r0.xxxx, r3.xyzw
  add r2.xyzw, r0.xyzw, r1.xyzw

#line 244
endif 

#line 248
mov o0.xyzw, r2.xyzw
ret 
// Approximately 157 instruction slots used
