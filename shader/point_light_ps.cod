//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   struct LIGHT_DIRECTION
//   {
//       
//       float4 direction;              // Offset:    0
//       float4 color;                  // Offset:   16
//       float iTime;                   // Offset:   32
//       float triple_speed_iTime;      // Offset:   36
//       float elapsedTime;             // Offset:   40
//       float shadow_map_num;          // Offset:   44
//       float4x4 mlvp[3];              // Offset:   48
//
//   } light_direction;                 // Offset:    0 Size:   240
//   
//   struct PLAYER
//   {
//       
//       float4 position;               // Offset:  240
//       float4 direction;              // Offset:  256
//
//   } player;                          // Offset:  240 Size:    32 [unused]
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   struct POINT_LIGHT
//   {
//       
//       float4 color;                  // Offset:    0
//       float3 position;               // Offset:   16
//       float range;                   // Offset:   28
//
//   } point_light;                     // Offset:    0 Size:    32
//   
//   struct SPOT_LIGHT
//   {
//       
//       float3 position;               // Offset:   32
//       float pad;                     // Offset:   44
//       float3 color;                  // Offset:   48
//       float range;                   // Offset:   60
//       float3 direction;              // Offset:   64
//       float angle;                   // Offset:   76
//
//   } spot_light;                      // Offset:   32 Size:    48 [unused]
//   
//   struct HEMISPHERE_LIGHT
//   {
//       
//       float4 sky_color;              // Offset:   80
//       float4 ground_color;           // Offset:   96
//       float4 ground_normal;          // Offset:  112
//
//   } hemisphere_light;                // Offset:   80 Size:    48 [unused]
//
// }
//
// cbuffer RENDER_CONSTANTS
// {
//
//   float ambient_intensity;           // Offset:    0 Size:     4
//   float specular_intensity;          // Offset:    4 Size:     4 [unused]
//   float specular_power;              // Offset:    8 Size:     4 [unused]
//   uint tone_number;                  // Offset:   12 Size:     4 [unused]
//      = 0x00000002 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// linear_sampler_state              sampler      NA          NA             s1      1 
// anisotropic_sampler_state         sampler      NA          NA             s2      1 
// diffuse_map                       texture  float4          2d             t0      1 
// normal_map                        texture  float4          2d             t3      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
// RENDER_CONSTANTS                  cbuffer      NA          NA            cb3      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA            cb4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float       
// BINORMAL                 0   xyzw        4     NONE   float       
// TEXCOORD                 0   xy          5     NONE   float   xy  
// COLOR                    0   xyzw        6     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB4[2], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v5.xy
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- pin.sv_position.x; v0.y <- pin.sv_position.y; v0.z <- pin.sv_position.z; v0.w <- pin.sv_position.w; 
//   v1.x <- pin.position.x; v1.y <- pin.position.y; v1.z <- pin.position.z; v1.w <- pin.position.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   v3.x <- pin.tangent.x; v3.y <- pin.tangent.y; v3.z <- pin.tangent.z; v3.w <- pin.tangent.w; 
//   v4.x <- pin.binormal.x; v4.y <- pin.binormal.y; v4.z <- pin.binormal.z; v4.w <- pin.binormal.w; 
//   v5.x <- pin.texcoord.x; v5.y <- pin.texcoord.y; 
//   v6.x <- pin.color.x; v6.y <- pin.color.y; v6.z <- pin.color.z; v6.w <- pin.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 16 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\point_light_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v5.xyxx, t0.xyzw, s2  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 17
mov r0.w, r0.w  // r0.w <- alpha

#line 18
dp3 r1.x, v2.xyzx, v2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 19
itof r2.xy, l(0, 0, 0, 0)  // r2.x <- T.y; r2.y <- T.z
mov r2.z, l(1.000100)  // r2.z <- T.x

#line 20
mul r3.xyz, r1.yzxy, r2.yzxy
mul r2.xyz, r1.zxyz, r2.xyzx
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z

#line 21
mul r3.xyz, r1.zxyz, r2.yzxy
mul r4.xyz, r1.yzxy, r2.zxyz
mov r4.xyz, -r4.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- T.x; r3.y <- T.y; r3.z <- T.z

#line 23
sample_indexable(texture2d)(float,float,float,float) r4.xyz, v5.xyxx, t3.xyzw, s1
mov r4.xyz, r4.xyzx  // r4.x <- normal.x; r4.y <- normal.y; r4.z <- normal.z

#line 24
mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r4.xyz, r4.xyzx, r5.xyzx

#line 26
mul r3.xyz, r3.xyzx, r4.xxxx
mul r2.xyz, r2.xyzx, r4.yyyy
add r2.xyz, r2.xyzx, r3.xyzx
mul r1.xyz, r1.xyzx, r4.zzzz
add r1.xyz, r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 28
mov r2.xyz, -cb2[0].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z

#line 29
itof r1.w, l(0)
dp3 r2.w, r1.xyzx, r2.xyzx
mul r2.w, r2.w, l(0.500000)
add r2.w, r2.w, l(0.500000)
max r1.w, r1.w, r2.w
mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z

#line 31
mov r3.xyz, -v1.xyzx
add r3.xyz, r3.xyzx, cb1[0].xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- E.x; r3.y <- E.y; r3.z <- E.z

#line 32
itof r1.w, l(0)
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx
dp3 r2.x, r1.xyzx, r2.xyzx
max r1.w, r1.w, r2.x
mov r2.x, l(1.000000)
mul r2.x, r1.w, r2.x
mul r1.w, r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xxxx  // r2.x <- specular.x; r2.y <- specular.y; r2.z <- specular.z

#line 35
mov r4.xyz, -cb4[1].xyzx
add r4.xyz, r4.xyzx, v1.xyzx  // r4.x <- lig_direction.x; r4.y <- lig_direction.y; r4.z <- lig_direction.z

#line 36
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx

#line 38
itof r1.w, l(0)
dp3 r2.w, r1.xyzx, r4.xyzx
max r1.w, r1.w, r2.w
mul r5.xyz, r1.wwww, cb4[0].xyzx  // r5.x <- diff_point.x; r5.y <- diff_point.y; r5.z <- diff_point.z

#line 40
itof r1.w, l(0)
add r3.xyz, r3.xyzx, r4.xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
dp3 r1.x, r1.xyzx, r3.xyzx
max r1.x, r1.x, r1.w
mov r1.y, l(1.000000)
mul r1.y, r1.x, r1.y
mul r1.x, r1.x, r1.x
mul r1.xyz, r1.xxxx, r1.yyyy  // r1.x <- spec_point.x; r1.y <- spec_point.y; r1.z <- spec_point.z

#line 41
mov r3.xyz, -cb4[1].xyzx
add r3.xyz, r3.xyzx, v1.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
sqrt r1.w, r1.w  // r1.w <- distance.x

#line 43
div r2.w, l(1.000000), cb4[1].w
mul r1.w, r1.w, r2.w
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)  // r1.w <- affect

#line 45
lt r2.w, r1.w, l(0.000000)
if_nz r2.w

#line 47
  mov r1.w, l(0)

#line 48
endif 

#line 50
mov r2.w, l(1.000000)
mul r2.w, r1.w, r2.w
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.w  // r1.w <- affect

#line 52
mul r3.xyz, r1.wwww, r5.xyzx  // r3.x <- diff_point.x; r3.y <- diff_point.y; r3.z <- diff_point.z

#line 53
mul r1.xyz, r1.wwww, r1.xyzx

#line 55
add r0.xyz, r0.xyzx, r3.xyzx
add r0.xyz, r1.xyzx, r0.xyzx
add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- finalcolor.x; r0.y <- finalcolor.y; r0.z <- finalcolor.z

#line 56
add r0.x, r0.x, cb3[0].x

#line 57
add r0.y, r0.y, cb3[0].x

#line 58
add r0.z, r0.z, cb3[0].x

#line 59
mov o0.x, r0.x
mov o0.y, r0.y
mov o0.z, r0.z
mov o0.w, r0.w
ret 
// Approximately 109 instruction slots used
