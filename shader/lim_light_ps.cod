//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   struct LIGHT_DIRECTION
//   {
//       
//       float4 direction;              // Offset:    0
//       float4 color;                  // Offset:   16
//       float iTime;                   // Offset:   32
//       float triple_speed_iTime;      // Offset:   36
//       float elapsedTime;             // Offset:   40
//       float shadow_map_num;          // Offset:   44
//       float4x4 mlvp[3];              // Offset:   48
//
//   } light_direction;                 // Offset:    0 Size:   240
//   
//   struct PLAYER
//   {
//       
//       float4 position;               // Offset:  240
//       float4 direction;              // Offset:  256
//
//   } player;                          // Offset:  240 Size:    32 [unused]
//
// }
//
// cbuffer RENDER_CONSTANTS
// {
//
//   float ambient_intensity;           // Offset:    0 Size:     4
//   float specular_intensity;          // Offset:    4 Size:     4 [unused]
//   float specular_power;              // Offset:    8 Size:     4 [unused]
//   uint tone_number;                  // Offset:   12 Size:     4 [unused]
//      = 0x00000002 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// linear_sampler_state              sampler      NA          NA             s1      1 
// anisotropic_sampler_state         sampler      NA          NA             s2      1 
// diffuse_map                       texture  float4          2d             t0      1 
// normal_map                        texture  float4          2d             t3      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
// RENDER_CONSTANTS                  cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float       
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float   xy  
// TEXCOORD                 2   xyz         5     NONE   float     z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.z
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- pin.sv_position.x; v0.y <- pin.sv_position.y; v0.z <- pin.sv_position.z; v0.w <- pin.sv_position.w; 
//   v1.x <- pin.position.x; v1.y <- pin.position.y; v1.z <- pin.position.z; v1.w <- pin.position.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   v3.x <- pin.tangent.x; v3.y <- pin.tangent.y; v3.z <- pin.tangent.z; v3.w <- pin.tangent.w; 
//   v4.x <- pin.texcoord.x; v4.y <- pin.texcoord.y; 
//   v5.x <- pin.normal_in_view.x; v5.y <- pin.normal_in_view.y; v5.z <- pin.normal_in_view.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 17 "C:\Users\2200167\Desktop\個人製作\MyMe02\MyMe\HLSL\lim_light_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s2  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 18
mov r0.w, r0.w  // r0.w <- alpha

#line 19
dp3 r1.x, v2.xyzx, v2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 20
itof r2.xy, l(0, 0, 0, 0)  // r2.x <- T.y; r2.y <- T.z
mov r2.z, l(1.000100)  // r2.z <- T.x

#line 21
mul r3.xyz, r1.yzxy, r2.yzxy
mul r2.xyz, r1.zxyz, r2.xyzx
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- B.x; r2.y <- B.y; r2.z <- B.z

#line 22
mul r3.xyz, r1.zxyz, r2.yzxy
mul r4.xyz, r1.yzxy, r2.zxyz
mov r4.xyz, -r4.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- T.x; r3.y <- T.y; r3.z <- T.z

#line 24
sample_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t3.xyzw, s1
mov r4.xyz, r4.xyzx  // r4.x <- normal.x; r4.y <- normal.y; r4.z <- normal.z

#line 25
mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r4.xyz, r4.xyzx, r5.xyzx

#line 27
mul r3.xyz, r3.xyzx, r4.xxxx
mul r2.xyz, r2.xyzx, r4.yyyy
add r2.xyz, r2.xyzx, r3.xyzx
mul r1.xyz, r1.xyzx, r4.zzzz
add r1.xyz, r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 29
mov r2.xyz, -cb2[0].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z

#line 30
itof r1.w, l(0)
dp3 r1.x, r1.xyzx, r2.xyzx
mul r1.x, r1.x, l(0.500000)
add r1.x, r1.x, l(0.500000)
max r1.x, r1.x, r1.w
mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z

#line 36
dp4 r1.x, cb2[0].xyzw, v2.xyzw
max r1.x, r1.x, l(0.000000)
mov r1.x, -r1.x
add r1.x, r1.x, l(1.000000)  // r1.x <- power1

#line 38
mul r1.y, v5.z, l(-1.000000)
max r1.y, r1.y, l(0.000000)
mov r1.y, -r1.y
add r1.y, r1.y, l(1.000000)  // r1.y <- power2

#line 41
mul r1.x, r1.y, r1.x  // r1.x <- limpower

#line 44
log r1.x, r1.x
mul r1.x, r1.x, l(1.300000)
exp r1.x, r1.x  // r1.x <- limpower

#line 46
mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- limcolor.x; r0.y <- limcolor.y; r0.z <- limcolor.z

#line 47
add r0.x, r0.x, cb3[0].x

#line 48
add r0.y, r0.y, cb3[0].x

#line 49
add r0.z, r0.z, cb3[0].x

#line 50
mov o0.x, r0.x
mov o0.y, r0.y
mov o0.z, r0.z
mov o0.w, r0.w
ret 
// Approximately 65 instruction slots used
