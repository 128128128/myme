//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// noise_map                         texture  float4          2d             t2      1 
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float       
// SV_TessFactor            1   x           1  TRIEDGE   float       
// SV_TessFactor            2   x           2  TRIEDGE   float       
// SV_InsideTessFactor      0   x           3   TRIINT   float       
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   x z 
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Triangle                                3
//
ds_5_0
dcl_input_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_resource_texture2d (float,float,float,float) t2
dcl_input vDomain.xyz
dcl_input vicp[3][0].xz
dcl_input vicp[3][1].xy
dcl_output o0.xyzw
dcl_output o1.xy
dcl_temps 3
//
// Initial variable locations:
//   vpc3.x <- input.inside_tess_factor; 
//   vpc0.x <- input.tess_factor[0]; 
//   vpc1.x <- input.tess_factor[1]; 
//   vpc2.x <- input.tess_factor[2]; 
//   vDomain.x <- domain.x; vDomain.y <- domain.y; vDomain.z <- domain.z; 
//   o1.x <- <main return value>.texcoord.x; o1.y <- <main return value>.texcoord.y; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w; 
//   vicp[0][0].x <- patch[0].position.x; vicp[0][0].y <- patch[0].position.y; vicp[0][0].z <- patch[0].position.z; vicp[0][0].w <- patch[0].position.w; 
//   vicp[0][1].x <- patch[0].texcoord.x; vicp[0][1].y <- patch[0].texcoord.y; 
//   vicp[1][0].x <- patch[1].position.x; vicp[1][0].y <- patch[1].position.y; vicp[1][0].z <- patch[1].position.z; vicp[1][0].w <- patch[1].position.w; 
//   vicp[1][1].x <- patch[1].texcoord.x; vicp[1][1].y <- patch[1].texcoord.y; 
//   vicp[2][0].x <- patch[2].position.x; vicp[2][0].y <- patch[2].position.y; vicp[2][0].z <- patch[2].position.z; vicp[2][0].w <- patch[2].position.w; 
//   vicp[2][1].x <- patch[2].texcoord.x; vicp[2][1].y <- patch[2].texcoord.y
//
#line 13 "C:\Users\2200167\Desktop\個人製作\MyMe02\MyMe\HLSL\create_terrain_ds.hlsl"
mul r0.xy, vDomain.xxxx, vicp[0][0].xzxx
mul r0.zw, vDomain.yyyy, vicp[1][0].xxxz
add r0.xy, r0.zwzz, r0.xyxx
mul r0.zw, vDomain.zzzz, vicp[2][0].xxxz
add r0.xy, r0.zwzz, r0.xyxx  // r0.x <- output.position.x; r0.y <- output.position.z

#line 14
itof r0.z, l(1)  // r0.z <- output.position.w

#line 15
mul r1.xy, vDomain.xxxx, vicp[0][1].xyxx
mul r1.zw, vDomain.yyyy, vicp[1][1].xxxy
add r1.xy, r1.zwzz, r1.xyxx
mul r1.zw, vDomain.zzzz, vicp[2][1].xxxy
add r1.xy, r1.zwzz, r1.xyxx  // r1.x <- output.texcoord.x; r1.y <- output.texcoord.y

#line 17
mov r0.w, l(0)  // r0.w <- mip_level

#line 19
resinfo_indexable(texture2d)(float,float,float,float)_uint r1.zw, r0.w, t2.zwxy
mov r1.z, r1.z  // r1.z <- width
mov r1.w, r1.w  // r1.w <- height

#line 21
utof r0.w, r1.z
mul r0.w, r0.w, r1.x
ftou r2.x, r0.w  // r2.x <- u

#line 22
utof r0.w, r1.w
mul r0.w, r0.w, r1.y
ftou r2.y, r0.w  // r2.y <- v

#line 24
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.w, r2.xyzw, t2.yzwx
mov r0.w, r0.w  // r0.w <- altitude

#line 38
mov r0.w, r0.w  // r0.w <- output.position.y

#line 40
mov o0.xz, r0.xxyx
mov o0.y, r0.w
mov o0.w, r0.z
mov o1.xy, r1.xyxx
ret 
// Approximately 30 instruction slots used
