//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   struct LIGHT_DIRECTION
//   {
//       
//       float4 direction;              // Offset:    0
//       float4 color;                  // Offset:   16
//       float iTime;                   // Offset:   32
//       float triple_speed_iTime;      // Offset:   36
//       float elapsedTime;             // Offset:   40
//       float shadow_map_num;          // Offset:   44
//       float4x4 mlvp[3];              // Offset:   48
//
//   } light_direction;                 // Offset:    0 Size:   240
//   
//   struct PLAYER
//   {
//       
//       float4 position;               // Offset:  240
//       float4 direction;              // Offset:  256
//
//   } player;                          // Offset:  240 Size:    32 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// linear_sampler_state              sampler      NA          NA             s1      1 
// anisotropic_sampler_state         sampler      NA          NA             s2      1 
// diffuse_map                       texture  float4          2d             t0      1 
// normal_map                        texture  float4          2d             t3      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float       
// BINORMAL                 0   xyzw        4     NONE   float       
// TEXCOORD                 0   xy          5     NONE   float   xy  
// COLOR                    0   xyzw        6     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
// SV_TARGET                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v5.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- pin.sv_position.x; v0.y <- pin.sv_position.y; v0.z <- pin.sv_position.z; v0.w <- pin.sv_position.w; 
//   v1.x <- pin.position.x; v1.y <- pin.position.y; v1.z <- pin.position.z; v1.w <- pin.position.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   v3.x <- pin.tangent.x; v3.y <- pin.tangent.y; v3.z <- pin.tangent.z; v3.w <- pin.tangent.w; 
//   v4.x <- pin.binormal.x; v4.y <- pin.binormal.y; v4.z <- pin.binormal.z; v4.w <- pin.binormal.w; 
//   v5.x <- pin.texcoord.x; v5.y <- pin.texcoord.y; 
//   v6.x <- pin.color.x; v6.y <- pin.color.y; v6.z <- pin.color.z; v6.w <- pin.color.w; 
//   o4.x <- <main return value>.RM.x; o4.y <- <main return value>.RM.y; o4.z <- <main return value>.RM.z; o4.w <- <main return value>.RM.w; 
//   o3.x <- <main return value>.Position.x; o3.y <- <main return value>.Position.y; o3.z <- <main return value>.Position.z; o3.w <- <main return value>.Position.w; 
//   o2.x <- <main return value>.Normal.x; o2.y <- <main return value>.Normal.y; o2.z <- <main return value>.Normal.z; o2.w <- <main return value>.Normal.w; 
//   o1.x <- <main return value>.Depth.x; o1.y <- <main return value>.Depth.y; o1.z <- <main return value>.Depth.z; o1.w <- <main return value>.Depth.w; 
//   o0.x <- <main return value>.Color.x; o0.y <- <main return value>.Color.y; o0.z <- <main return value>.Color.z; o0.w <- <main return value>.Color.w
//
#line 27 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\trees_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v5.xyxx, t0.xyzw, s2  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 28
mov r1.w, r0.w  // r1.w <- alpha

#line 29
dp3 r2.x, v2.xyzx, v2.xyzx
rsq r2.x, r2.x
mul r2.xyz, r2.xxxx, v2.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z

#line 30
itof r3.xy, l(0, 0, 0, 0)  // r3.x <- T.y; r3.y <- T.z
mov r3.z, l(1.000100)  // r3.z <- T.x

#line 31
mul r4.xyz, r2.yzxy, r3.yzxy
mul r3.xyz, r2.zxyz, r3.xyzx
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx  // r3.x <- B.x; r3.y <- B.y; r3.z <- B.z

#line 32
mul r4.xyz, r2.zxyz, r3.yzxy
mul r5.xyz, r2.yzxy, r3.zxyz
mov r5.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, r4.xyzx  // r4.x <- T.x; r4.y <- T.y; r4.z <- T.z

#line 34
sample_indexable(texture2d)(float,float,float,float) r5.xyz, v5.xyxx, t3.xyzw, s1
mov r5.xyz, r5.xyzx  // r5.x <- normal.x; r5.y <- normal.y; r5.z <- normal.z

#line 35
mul r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r5.xyz, r5.xyzx, r6.xyzx

#line 37
mul r4.xyz, r4.xyzx, r5.xxxx
mul r3.xyz, r3.xyzx, r5.yyyy
add r3.xyz, r3.xyzx, r4.xyzx
mul r2.xyz, r2.xyzx, r5.zzzz
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z

#line 39
mov r3.xyz, -cb2[0].xyzx
dp3 r3.w, r3.xyzx, r3.xyzx
rsq r3.w, r3.w
mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- L.x; r3.y <- L.y; r3.z <- L.z

#line 40
itof r3.w, l(0)
dp3 r3.x, r2.xyzx, r3.xyzx
max r3.x, r3.x, r3.w
mul r1.xyz, r0.xyzx, r3.xxxx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z

#line 42
mov r1.xyz, r1.xyzx  // r1.x <- finalcolor.x; r1.y <- finalcolor.y; r1.z <- finalcolor.z

#line 44
mov r1.xyz, r1.xyzx  // r1.x <- ret.Color.x; r1.y <- ret.Color.y; r1.z <- ret.Color.z
mov r1.w, r1.w  // r1.w <- ret.Color.w

#line 45
mov r2.w, l(0)
mov r2.xyzw, r2.xyzw  // r2.x <- ret.Normal.x; r2.y <- ret.Normal.y; r2.z <- ret.Normal.z; r2.w <- ret.Normal.w

#line 46
mov r3.xyzw, v1.xyzw  // r3.x <- ret.Position.x; r3.y <- ret.Position.y; r3.z <- ret.Position.z; r3.w <- ret.Position.w

#line 47
mov r4.xyzw, -cb1[0].xyzw
add r4.xyzw, r4.xyzw, v1.xyzw
dp4 r4.x, r4.xyzw, r4.xyzw
sqrt r4.x, r4.x  // r4.x <- dist

#line 48
itof r4.yzw, l(0, 0, 0, 1)  // r4.y <- ret.Depth.y; r4.z <- ret.Depth.z; r4.w <- ret.Depth.w
mov r4.x, r4.x  // r4.x <- ret.Depth.x

#line 49
mov r0.xyzw, r0.xyzw  // r0.x <- ret.RM.x; r0.y <- ret.RM.y; r0.z <- ret.RM.z; r0.w <- ret.RM.w

#line 50
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r4.xyzw
mov o2.xyzw, r2.xyzw
mov o3.xyzw, r3.xyzw
mov o4.xyzw, r0.xyzw
ret 
// Approximately 61 instruction slots used
