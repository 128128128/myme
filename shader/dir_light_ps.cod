//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   struct LIGHT_CONSTANTS
//   {
//       
//       float4 direction;              // Offset:    0
//       float4 color;                  // Offset:   16
//
//   } light_direction;                 // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[1]                 sampler      NA          NA             s1      1 
// normal_texture                    texture  float4          2d             t1      1 
// position_texture                  texture  float4          2d             t2      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB2[2], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 211 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\dir_light_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t1.xyzw, s1  // r0.x <- tex.x; r0.y <- tex.y; r0.z <- tex.z; r0.w <- tex.w

#line 213
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t2.xyzw, s1
mov r1.xyz, r1.xyzx  // r1.x <- P.x; r1.y <- P.y; r1.z <- P.z

#line 214
mov r2.xyz, cb2[0].xyzx  // r2.x <- PLightPos.x; r2.y <- PLightPos.y; r2.z <- PLightPos.z

#line 215
mov r2.xyz, -r2.xyzx
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- PLightDir.x; r1.y <- PLightDir.y; r1.z <- PLightDir.z

#line 217
ge r1.w, cb2[0].w, l(0.001000)
movc r1.w, r1.w, l(1.000000), l(0)  // r1.w <- type

#line 219
lt r2.x, r1.w, l(0.100000)
dp3 r2.y, r1.xyzx, r1.xyzx
sqrt r2.y, r2.y
div r2.y, r2.y, cb2[0].w
mov r2.y, -r2.y
add r2.y, r2.y, l(1.000000)
movc r2.x, r2.x, l(1.000000), r2.y  // r2.x <- attenuation

#line 220
max r2.x, r2.x, l(0.000000)
min r2.x, r2.x, l(1.000000)  // r2.x <- attenuation

#line 222
mov r2.yzw, -cb2[0].xxyz
add r1.xyz, r1.xyzx, r2.yzwy
mul r1.xyz, r1.xyzx, r1.wwww
add r1.xyz, r1.xyzx, cb2[0].xyzx  // r1.x <- L.x; r1.y <- L.y; r1.z <- L.z

#line 224
mul r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r2.yzw, l(-0.000000,-1.000000,-1.000000,-1.000000)
add r0.xyz, r0.xyzx, r2.yzwy  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z

#line 225
itof r2.yzw, l(0, 2, 2, 2)
mul r2.yzw, r2.yyzw, cb2[1].xxyz  // r2.y <- C.x; r2.z <- C.y; r2.w <- C.z

#line 226
mul r2.xyz, r2.xxxx, r2.yzwy  // r2.x <- C.x; r2.y <- C.y; r2.z <- C.z

#line 228
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx

#line 229
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww

#line 230
dp3 r0.x, r0.xyzx, r1.xyzx
mov r0.x, -r0.x  // r0.x <- d

#line 231
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)  // r0.x <- d

#line 232
mul r0.xyz, r0.xxxx, r2.xyzx  // r0.x <- tex.x; r0.y <- tex.y; r0.z <- tex.z

#line 234
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 41 instruction slots used
