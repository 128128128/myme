//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer OBJECT_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   row_major float4x4 bone_transforms[128];// Offset:   64 Size:  8192
//
// }
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// OBJECT_CONSTANT_BUFFER            cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// WEIGHTS                  0   xyzw        1     NONE   float   xyzw
// BONES                    0   xyzw        2     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[516], dynamicIndexed
dcl_constantbuffer CB1[14], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- bone_weights.x; v1.y <- bone_weights.y; v1.z <- bone_weights.z; v1.w <- bone_weights.w; 
//   v2.x <- bone_indices.x; v2.y <- bone_indices.y; v2.z <- bone_indices.z; v2.w <- bone_indices.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 6 "C:\Users\2200167\Desktop\個人製作\MyMe02\MyMe\HLSL\dynamic_shadowcast_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- blended_position.x; r0.y <- blended_position.y; r0.z <- blended_position.z

#line 7
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- blended_position.x; r1.y <- blended_position.y; r1.z <- blended_position.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, l(4)
  breakc_z r2.x

#line 9
  dp4 r2.x, v1.xyzw, icb[r1.w + 0].xyzw
  and r3.xyzw, v2.xyzw, icb[r1.w + 4].xyzw
  or r2.yz, r3.yywy, r3.xxzx
  or r2.y, r2.z, r2.y
  imul null, r2.y, r2.y, l(4)
  mul r3.xyz, v0.xxxx, cb0[r2.y + 4].xyzx
  mul r4.xyz, v0.yyyy, cb0[r2.y + 5].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.zzzz, cb0[r2.y + 6].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r2.yzw, v0.wwww, cb0[r2.y + 7].xxyz
  add r2.yzw, r2.yyzw, r3.xxyz
  mul r2.xyz, r2.yzwy, r2.xxxx
  add r1.xyz, r1.xyzx, r2.xyzx

#line 10
  iadd r1.w, r1.w, l(1)
endloop 

#line 11
mov r1.xyz, r1.xyzx  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z
mov r0.x, l(1.000000)  // r0.x <- position.w

#line 13
mul r2.xyzw, cb0[0].xxxx, cb1[10].xyzw
mul r3.xyzw, cb0[0].yyyy, cb1[11].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[0].zzzz, cb1[12].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[0].wwww, cb1[13].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[1].xxxx, cb1[10].xyzw
mul r4.xyzw, cb0[1].yyyy, cb1[11].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[1].zzzz, cb1[12].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[1].wwww, cb1[13].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[2].xxxx, cb1[10].xyzw
mul r5.xyzw, cb0[2].yyyy, cb1[11].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[2].zzzz, cb1[12].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[2].wwww, cb1[13].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].xxxx, cb1[10].xyzw
mul r6.xyzw, cb0[3].yyyy, cb1[11].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[3].zzzz, cb1[12].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[3].wwww, cb1[13].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r2.xyzw, r1.xxxx, r2.xyzw
mul r3.xyzw, r1.yyyy, r3.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.zzzz, r4.xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.xxxx, r5.xyzw
add o0.xyzw, r0.xyzw, r1.xyzw
ret 
// Approximately 61 instruction slots used
