//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[2]                 sampler      NA          NA             s2      1 
// albedo_map                        texture  float4          2d             t0      1 
// normal_map                        texture  float4          2d             t1      1 
// position_map                      texture  float4          2d             t2      1 
// RM_map                            texture  float4          2d             t3      1 
// depth_map                         texture  float4          2d             t4      1 
// light_map                         texture  float4          2d             t5      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[1], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
//   v3.x <- pin.worldpos.x; v3.y <- pin.worldpos.y; v3.z <- pin.worldpos.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 44 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\composite_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s2  // r0.x <- tex.x; r0.y <- tex.y; r0.z <- tex.z; r0.w <- tex.w

#line 45
mov r0.xyzw, r0.xyzw  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 46
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t5.xyzw, s2
mov r1.xyz, r1.xyzx  // r1.x <- light.x; r1.y <- light.y; r1.z <- light.z

#line 49
sample_indexable(texture2d)(float,float,float,float) r1.w, v1.xyxx, t3.yzwx, s2
mov r1.w, r1.w  // r1.w <- metallic

#line 51
mul r2.xyz, r0.xyzx, r1.xyzx  // r2.x <- m1.x; r2.y <- m1.y; r2.z <- m1.z

#line 52
mul r3.xyz, r0.xyzx, l(0.400000, 0.400000, 0.400000, 0.000000)  // r3.x <- m0.x; r3.y <- m0.y; r3.z <- m0.z

#line 53
mul r4.xyz, r1.xyzx, l(0.050000, 0.050000, 0.050000, 0.000000)
add r3.xyz, r3.xyzx, r4.xyzx

#line 54
mov r4.xyz, -r3.xyzx
add r2.xyz, r2.xyzx, r4.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z

#line 58
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t2.xyzw, s2
mov r3.xyz, r3.xyzx  // r3.x <- P.x; r3.y <- P.y; r3.z <- P.z

#line 59
mov r4.xyz, -cb1[0].xyzx
add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- E.x; r3.y <- E.y; r3.z <- E.z

#line 60
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx

#line 62
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t1.xyzw, s2  // r4.x <- nor.x; r4.y <- nor.y; r4.z <- nor.z; r4.w <- nor.w

#line 63
ge r1.w, l(0.000000), r4.w
if_nz r1.w

#line 64
  mov o0.xyzw, r0.xyzw
  ret 
endif 

#line 65
mov r4.xyz, r4.xyzx  // r4.x <- N.x; r4.y <- N.y; r4.z <- N.z

#line 69
mul r0.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r4.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z

#line 70
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww

#line 72
mov r3.xyz, -r3.xyzx
dp3 r0.x, r3.xyzx, r0.xyzx  // r0.x <- d

#line 73
mov r0.x, -r0.x
add r0.x, r0.x, l(1.000000)
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)
mul r0.x, r0.x, l(0.600000)  // r0.x <- fresnel

#line 74
mov r0.y, l(1.000000)
mul r0.x, r0.x, r0.x
mul r0.y, r0.x, r0.y
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.y  // r0.x <- fresnel

#line 75
mov r3.xyz, -r2.xyzx
add r1.xyz, r1.xyzx, r3.xyzx
mul r0.xyz, r0.xxxx, r1.xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 79
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t4.yxzw, s2
mov r1.x, r1.x  // r1.x <- depth.y

#line 80
lt r1.x, l(0.200000), r1.x
itof r1.yzw, l(0, 0, 0, 0)
movc r1.xyz, r1.xxxx, r0.xyzx, r1.yzwy
add r0.xyz, r0.xyzx, r1.xyzx

#line 81
mov o0.xyz, r0.xyzx  // o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z
mov o0.w, r0.w  // o0.w <- <main return value>.w
ret 
// Approximately 59 instruction slots used
