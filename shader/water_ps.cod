//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   struct SOMETHING
//   {
//       
//       float iTime;                   // Offset:    0
//       float triple_speed_iTime;      // Offset:    4
//       float elapsedTime;             // Offset:    8
//       float shadow_map_num;          // Offset:   12
//       float4x4 mlvp[3];              // Offset:   16
//       float4 warm_factor;            // Offset:  208
//       float4 cool_factor;            // Offset:  224
//       float4 wind_position;          // Offset:  240
//       float4 wind_direction;         // Offset:  256
//
//   } something;                       // Offset:    0 Size:   272
//   
//   struct PLAYER
//   {
//       
//       float4 position;               // Offset:  272
//       float4 direction;              // Offset:  288
//
//   } player;                          // Offset:  272 Size:    32 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// linear_sampler_state              sampler      NA          NA             s1      1 
// bump_map                          texture  float4          2d             t4      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// BINORMAL                 0   xyzw        4     NONE   float       
// TEXCOORD                 0   xy          5     NONE   float   xy  
// COLOR                    0   xyzw        6     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
// SV_TARGET                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v5.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- pin.sv_position.x; v0.y <- pin.sv_position.y; v0.z <- pin.sv_position.z; v0.w <- pin.sv_position.w; 
//   v1.x <- pin.position.x; v1.y <- pin.position.y; v1.z <- pin.position.z; v1.w <- pin.position.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   v3.x <- pin.tangent.x; v3.y <- pin.tangent.y; v3.z <- pin.tangent.z; v3.w <- pin.tangent.w; 
//   v4.x <- pin.binormal.x; v4.y <- pin.binormal.y; v4.z <- pin.binormal.z; v4.w <- pin.binormal.w; 
//   v5.x <- pin.texcoord.x; v5.y <- pin.texcoord.y; 
//   v6.x <- pin.color.x; v6.y <- pin.color.y; v6.z <- pin.color.z; v6.w <- pin.color.w; 
//   o4.x <- <main return value>.RM.x; o4.y <- <main return value>.RM.y; o4.z <- <main return value>.RM.z; o4.w <- <main return value>.RM.w; 
//   o3.x <- <main return value>.Position.x; o3.y <- <main return value>.Position.y; o3.z <- <main return value>.Position.z; o3.w <- <main return value>.Position.w; 
//   o2.x <- <main return value>.Normal.x; o2.y <- <main return value>.Normal.y; o2.z <- <main return value>.Normal.z; o2.w <- <main return value>.Normal.w; 
//   o1.x <- <main return value>.Depth.x; o1.y <- <main return value>.Depth.y; o1.z <- <main return value>.Depth.z; o1.w <- <main return value>.Depth.w; 
//   o0.x <- <main return value>.Color.x; o0.y <- <main return value>.Color.y; o0.z <- <main return value>.Color.z; o0.w <- <main return value>.Color.w
//
#line 302 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\water_ps.hlsl"
mov r0.w, l(1.000000)  // r0.w <- alpha

#line 314
mov r1.xy, l(0.026600,0.026600,0,0)  // r1.x <- temp_cast_0.x; r1.y <- temp_cast_0.y

#line 315
mul r1.xy, r1.xyxx, cb3[0].xxxx
add r1.xy, r1.xyxx, v5.xyxx  // r1.x <- panner21.x; r1.y <- panner21.y

#line 319
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t4.xyzw, s1
itof r2.xyz, l(2, 2, 2, 0)
mul r1.xyz, r1.xyzx, r2.xyzx
itof r2.xyz, l(1, 1, 1, 0)
mov r2.xyz, -r2.xyzx
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- normal1.x; r1.y <- normal1.y; r1.z <- normal1.z

#line 320
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v5.xyxx, t4.xyzw, s1
itof r3.xyz, l(2, 2, 2, 0)
mul r2.xyz, r2.xyzx, r3.xyzx
itof r3.xyz, l(1, 1, 1, 0)
mov r3.xyz, -r3.xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- normal2.x; r2.y <- normal2.y; r2.z <- normal2.z

#line 321
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- temp_output_23_0.x; r1.y <- temp_output_23_0.y; r1.z <- temp_output_23_0.z

#line 322
mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
add r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r1.x <- temp_output_23_0.x; r1.y <- temp_output_23_0.y; r1.z <- temp_output_23_0.z

#line 324
mov r0.xyz, l(0.290000,0.290000,0.340000,0)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 325
mov r0.xyz, r0.xyzx  // r0.x <- ret.Color.x; r0.y <- ret.Color.y; r0.z <- ret.Color.z
mov r0.w, r0.w  // r0.w <- ret.Color.w

#line 326
mov r1.xyz, r1.xyzx  // r1.x <- ret.Normal.x; r1.y <- ret.Normal.y; r1.z <- ret.Normal.z
mov r1.w, l(1.000000)  // r1.w <- ret.Normal.w

#line 327
mov r2.xyzw, v1.xyzw  // r2.x <- ret.Position.x; r2.y <- ret.Position.y; r2.z <- ret.Position.z; r2.w <- ret.Position.w

#line 328
mov r3.xyzw, -cb1[0].xyzw
add r3.xyzw, r3.xyzw, v1.xyzw
dp4 r3.x, r3.xyzw, r3.xyzw
sqrt r3.x, r3.x  // r3.x <- depth

#line 329
itof r3.yzw, l(0, 0, 0, 1)  // r3.y <- ret.Depth.y; r3.z <- ret.Depth.z; r3.w <- ret.Depth.w
mov r3.x, r3.x  // r3.x <- ret.Depth.x

#line 330
mov r4.xyzw, l(1.000000,0,0,1.000000)  // r4.x <- ret.RM.x; r4.y <- ret.RM.y; r4.z <- ret.RM.z; r4.w <- ret.RM.w

#line 331
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r3.xyzw
mov o2.xyzw, r1.xyzw
mov o3.xyzw, r2.xyzw
mov o4.xyzw, r4.xyzw
ret 
// Approximately 38 instruction slots used
