//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer OBJECT_CONSTANTS
// {
//
//   float4x4 world;                    // Offset:    0 Size:    64
//   float4 color;                      // Offset:   64 Size:    16 [unused]
//
// }
//
// cbuffer WIND_CONSTANTS
// {
//
//   float max_wind_strength;           // Offset:    0 Size:     4 [unused]
//   float wind_strength;               // Offset:    4 Size:     4 [unused]
//   float wind_speed;                  // Offset:    8 Size:     4 [unused]
//   float mask;                        // Offset:   12 Size:     4
//   float3 wind_direction;             // Offset:   16 Size:    12 [unused]
//   float wind_amplitude;              // Offset:   28 Size:     4 [unused]
//   float wind_amplitude_multiplier;   // Offset:   32 Size:     4 [unused]
//   float flat_lighting;               // Offset:   36 Size:     4 [unused]
//   float wind_debug;                  // Offset:   40 Size:     4 [unused]
//   float pad;                         // Offset:   44 Size:     4 [unused]
//
// }
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// anisotropic_sampler_state         sampler      NA          NA             s2      1 
// main_texture                      texture  float4          2d             t0      1 
// OBJECT_CONSTANTS                  cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// WIND_CONSTANTS                    cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float       
// COLOR                    1   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
// SV_TARGET                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB5[1], immediateIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s2
add r1.x, r0.w, -cb5[0].w
lt r1.x, r1.x, l(0.000000)
discard_nz r1.x
add r1.x, cb0[3].y, cb0[3].x
add r1.x, r1.x, cb0[3].z
frc r1.x, r1.x
mul r1.x, r1.x, l(0.184000)
add r1.yzw, -r0.xxyz, l(0.000000, 1.000000, 0.500000, 0.000000)
mad_sat o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
mov o0.w, r0.w
add r0.xyzw, v1.xyzw, -cb1[0].xyzw
dp4 r0.x, r0.xyzw, r0.xyzw
sqrt o1.x, r0.x
mov o1.yzw, l(0,0,0,1.000000)
mov o2.xyzw, v2.xyzw
mov o3.xyzw, v1.xyzw
mov o4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
ret 
// Approximately 19 instruction slots used
