//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANT_BUFFER
// {
//
//   struct CAMERA_CONSTANTS
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//
//   } camera_constants;                // Offset:    0 Size:   352
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   struct SOMETHING
//   {
//       
//       float iTime;                   // Offset:    0
//       float triple_speed_iTime;      // Offset:    4
//       float elapsedTime;             // Offset:    8
//       float shadow_map_num;          // Offset:   12
//       float4x4 mlvp[3];              // Offset:   16
//       float4 warm_factor;            // Offset:  208
//       float4 cool_factor;            // Offset:  224
//       float4 wind_position;          // Offset:  240
//       float4 wind_direction;         // Offset:  256
//
//   } something;                       // Offset:    0 Size:   272
//   
//   struct PLAYER
//   {
//       
//       float4 position;               // Offset:  272
//       float4 direction;              // Offset:  288
//
//   } player;                          // Offset:  272 Size:    32 [unused]
//
// }
//
// cbuffer OBJECT_CONSTANTS
// {
//
//   float4x4 world;                    // Offset:    0 Size:    64
//   float4 color;                      // Offset:   64 Size:    16 [unused]
//
// }
//
// cbuffer WIND_CONSTANTS
// {
//
//   float max_wind_strength;           // Offset:    0 Size:     4
//   float wind_strength;               // Offset:    4 Size:     4
//   float wind_speed;                  // Offset:    8 Size:     4
//   float mask;                        // Offset:   12 Size:     4 [unused]
//   float3 wind_direction;             // Offset:   16 Size:    12
//   float wind_amplitude;              // Offset:   28 Size:     4
//   float wind_amplitude_multiplier;   // Offset:   32 Size:     4
//   float flat_lighting;               // Offset:   36 Size:     4
//   float wind_debug;                  // Offset:   40 Size:     4 [unused]
//   float pad;                         // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// anisotropic_sampler_state         sampler      NA          NA             s2      1 
// wind_vectors                      texture  float4          2d             t4      1 
// OBJECT_CONSTANTS                  cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb3      1 
// WIND_CONSTANTS                    cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyzw        2     NONE   float       
// BINORMAL                 0   xyzw        3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float   xy  
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
// COLOR                    1   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[14], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB5[3], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v4.xy
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; v1.w <- vin.normal.w; 
//   v2.x <- vin.tangent.x; v2.y <- vin.tangent.y; v2.z <- vin.tangent.z; v2.w <- vin.tangent.w; 
//   v3.x <- vin.binormal.x; v3.y <- vin.binormal.y; v3.z <- vin.binormal.z; v3.w <- vin.binormal.w; 
//   v4.x <- vin.texcoord.x; v4.y <- vin.texcoord.y; 
//   v5.x <- vin.color.x; v5.y <- vin.color.y; v5.z <- vin.color.z; v5.w <- vin.color.w; 
//   o5.x <- <main return value>.vertexToFrag332.x; o5.y <- <main return value>.vertexToFrag332.y; o5.z <- <main return value>.vertexToFrag332.z; o5.w <- <main return value>.vertexToFrag332.w; 
//   o4.x <- <main return value>.color.x; o4.y <- <main return value>.color.y; o4.z <- <main return value>.color.z; o4.w <- <main return value>.color.w; 
//   o3.x <- <main return value>.texcoord.x; o3.y <- <main return value>.texcoord.y; 
//   o2.x <- <main return value>.normal.x; o2.y <- <main return value>.normal.y; o2.z <- <main return value>.normal.z; o2.w <- <main return value>.normal.w; 
//   o1.x <- <main return value>.position.x; o1.y <- <main return value>.position.y; o1.z <- <main return value>.position.z; o1.w <- <main return value>.position.w; 
//   o0.x <- <main return value>.sv_position.x; o0.y <- <main return value>.sv_position.y; o0.z <- <main return value>.sv_position.z; o0.w <- <main return value>.sv_position.w
//
#line 12 "C:\Users\2200167\Desktop\個人製作\myme03\myme\HLSL\tree_branch_vs.hlsl"
dp3 r0.x, v0.xyzx, cb0[0].xyzx  // r0.x <- ase_worldPos.x
dp3 r0.y, v0.xyzx, cb0[1].xyzx  // r0.y <- ase_worldPos.y
dp3 r0.z, v0.xyzx, cb0[2].xyzx  // r0.z <- ase_worldPos.z

#line 13
mul r0.w, cb5[0].z, l(0.050000)
mul r0.w, r0.w, cb3[0].y  // r0.w <- temp_output_60_0

#line 14
mov r1.xy, cb5[1].xzxx  // r1.x <- appendResult249.x; r1.y <- appendResult249.y

#line 15
mul r1.z, cb5[1].w, cb5[2].x
mul r2.xy, r0.xzxx, l(0.010000, 0.010000, 0.000000, 0.000000)
mul r1.zw, r1.zzzz, r2.xxxy
mul r1.xy, r0.wwww, r1.xyxx
add r1.xy, r1.xyxx, r1.zwzz
sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t4.xyzw, s2, l(0.000000)
mov r1.xyz, r1.xyzx  // r1.x <- wind_vectors_99.x; r1.y <- wind_vectors_99.y; r1.z <- wind_vectors_99.z

#line 16
mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r2.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r1.xyz, r1.xyzx, r2.xyzx

#line 17
mov r2.x, cb0[0].x
mov r2.y, cb0[1].x
mov r2.z, cb0[2].x
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r2.x, r1.w  // r2.x <- ase_objectScale.x
mov r3.x, cb0[0].z
mov r3.y, cb0[1].z
mov r3.z, cb0[2].z
dp3 r1.w, r3.xyzx, r3.xyzx
sqrt r2.z, r1.w  // r2.z <- ase_objectScale.z

#line 18
mov r2.yw, cb5[1].xxxz  // r2.y <- appendResult250.x; r2.w <- appendResult250.z

#line 19
itof r3.xy, l(1, 1, 0, 0)  // r3.x <- _Vector2.x; r3.y <- _Vector2.z

#line 20
itof r3.zw, l(0, 0, 0, 0)
mul r2.xz, r0.wwww, r2.xxzx
mul r2.xy, r2.ywyy, r2.xzxx
itof r2.zw, l(0, 0, -1, -1)
mov r2.zw, -r2.zzzw
add r2.xy, r2.zwzz, r2.xyxx
sincos r2.xy, null, r2.xyxx
itof r2.zw, l(0, 0, 0, 0)
mov r2.zw, -r2.zzzw
add r2.zw, r2.zzzw, r3.xxxy
mul r2.xy, r2.zwzz, r2.xyxx
itof r2.zw, l(0, 0, -1, -1)
mov r2.zw, -r2.zzzw
add r2.zw, r2.zzzw, r3.xxxy
div r2.xy, r2.xyxx, r2.zwzz
add r2.xy, r2.xyxx, r3.zwzz
mul r2.xz, r2.xxyx, v4.yyyy  // r2.x <- break282.x; r2.z <- break282.z

#line 21
mov r2.y, l(0)
mov r2.xyz, r2.xyzx  // r2.x <- appendResult283.x; r2.y <- appendResult283.y; r2.z <- appendResult283.z

#line 22
mul r1.xyz, r1.xyzx, v5.yyyy
mul r1.xyz, r1.xyzx, cb5[0].xxxx
mul r1.xyz, r1.xyzx, cb5[0].yyyy
add r1.xyz, r2.xyzx, r1.xyzx  // r1.x <- wind17.x; r1.y <- wind17.y; r1.z <- wind17.z

#line 23
mul r1.xyz, r1.xyzx, l(20.000000, 20.000000, 20.000000, 0.000000)
add r1.xyz, r1.xyzx, v0.xyzx  // r1.x <- vin.position.x; r1.y <- vin.position.y; r1.z <- vin.position.z

#line 24
mov r2.xyz, v1.xyzx  // r2.x <- ase_vertexNormal.x; r2.y <- ase_vertexNormal.y; r2.z <- ase_vertexNormal.z

#line 25
itof r3.xyz, l(0, 1, 0, 0)  // r3.x <- _Vector0.x; r3.y <- _Vector0.y; r3.z <- _Vector0.z

#line 26
mov r4.xyz, -r2.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r3.xyz, r3.xyzx, cb5[2].yyyy
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- lerpResult94.x; r2.y <- lerpResult94.y; r2.z <- lerpResult94.z

#line 27
mov r2.xyz, r2.xyzx  // r2.x <- vin.normal.x; r2.y <- vin.normal.y; r2.z <- vin.normal.z

#line 29
itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- ase_worldlightDir.x; r3.y <- ase_worldlightDir.y; r3.z <- ase_worldlightDir.z

#line 33
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx  // r3.x <- normalizeResult236.x; r3.y <- normalizeResult236.y; r3.z <- normalizeResult236.z

#line 34
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, cb1[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- ase_worldViewDir.x; r0.y <- ase_worldViewDir.y; r0.z <- ase_worldViewDir.z

#line 35
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
dp3 r0.x, r3.xyzx, r0.xyzx  // r0.x <- dotResult36

#line 39
itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- ase_lightColor.x; r3.y <- ase_lightColor.y; r3.z <- ase_lightColor.z; r3.w <- ase_lightColor.w

#line 41
max r0.x, r0.x, l(0.000000)
mul r0.x, r0.x, v5.z
itof r0.y, l(0)
mul r0.x, r0.y, r0.x
itof r4.xyzw, l(1, 1, 1, 0)
mul r3.xyzw, r3.xyzw, r4.xyzw
mul r0.xyzw, r0.xxxx, r3.xyzw  // r0.x <- vout.vertexToFrag332.x; r0.y <- vout.vertexToFrag332.y; r0.z <- vout.vertexToFrag332.z; r0.w <- vout.vertexToFrag332.w

#line 43
mul r3.xyzw, cb1[10].xxxx, cb0[0].xyzw
mul r4.xyzw, cb1[11].xxxx, cb0[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb1[12].xxxx, cb0[2].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb1[13].xxxx, cb0[3].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb1[10].yyyy, cb0[0].xyzw
mul r5.xyzw, cb1[11].yyyy, cb0[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb1[12].yyyy, cb0[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb1[13].yyyy, cb0[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb1[10].zzzz, cb0[0].xyzw
mul r6.xyzw, cb1[11].zzzz, cb0[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb1[12].zzzz, cb0[2].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb1[13].zzzz, cb0[3].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb1[10].wwww, cb0[0].xyzw
mul r7.xyzw, cb1[11].wwww, cb0[1].xyzw
add r6.xyzw, r6.xyzw, r7.xyzw
mul r7.xyzw, cb1[12].wwww, cb0[2].xyzw
add r6.xyzw, r6.xyzw, r7.xyzw
mul r7.xyzw, cb1[13].wwww, cb0[3].xyzw
add r6.xyzw, r6.xyzw, r7.xyzw
mov r1.w, v0.w
dp4 r3.x, r1.xyzw, r3.xyzw  // r3.x <- vout.sv_position.x
dp4 r3.y, r1.xyzw, r4.xyzw  // r3.y <- vout.sv_position.y
dp4 r3.z, r1.xyzw, r5.xyzw  // r3.z <- vout.sv_position.z
dp4 r3.w, r1.xyzw, r6.xyzw  // r3.w <- vout.sv_position.w

#line 45
dp4 r4.x, r1.xyzw, cb0[0].xyzw  // r4.x <- vout.position.x
dp4 r4.y, r1.xyzw, cb0[1].xyzw  // r4.y <- vout.position.y
dp4 r4.z, r1.xyzw, cb0[2].xyzw  // r4.z <- vout.position.z
dp4 r4.w, r1.xyzw, cb0[3].xyzw  // r4.w <- vout.position.w

#line 47
mov r1.xy, v4.xyxx  // r1.x <- vout.texcoord.x; r1.y <- vout.texcoord.y

#line 49
mov r5.xyzw, v5.xyzw  // r5.x <- vout.color.x; r5.y <- vout.color.y; r5.z <- vout.color.z; r5.w <- vout.color.w

#line 51
mov r2.xyz, r2.xyzx  // r2.x <- vout.normal.x; r2.y <- vout.normal.y; r2.z <- vout.normal.z
mov r2.w, v1.w  // r2.w <- vout.normal.w

#line 52
mov o0.xyzw, r3.xyzw
mov o1.xyzw, r4.xyzw
mov o2.xyzw, r2.xyzw
mov o4.xyzw, r5.xyzw
mov o5.xyzw, r0.xyzw
mov o3.xy, r1.xyxx
ret 
// Approximately 128 instruction slots used
